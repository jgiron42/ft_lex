
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdlib.h>
#include <errno.h>
#include <stdbool.h>
#define ECHO do{printf("%s", yytext);}while(0)
#define BEGIN yy_start_state = 1 +
#define CURRENT_START_CONDITION (yy_start_state - 1)
#define REJECT do{yy_pop_match();yy_buffer[yyindex] = yysave;yysave = 0;goto yy_handle_match;}while(0)
#ifndef YYLMAX
# define YYLMAX 10000
#endif

%%[DEFINES]%%

%%[HEADER_CONTENT]%%

%%[STATES_DEFINITION]%%

char	*yy_buffer = NULL;
size_t	yyindex = 0;
size_t	yyleng = 0;
FILE	*yyin;
bool	yynoflush = false;
char	yysave = 0;

#ifdef YY_TEXT_ARRAY
char yytext[YYLMAX];
#else
char *yytext;
#endif

static const int yytransitions[][258] = %%[TRANSITIONS]%%;

static const int yyaccept_table[] = %%[ACCEPTS]%%;

typedef struct {
	size_t pos;
	int rule;
}		yymatch;

yymatch	*yy_match_stack = NULL;
int		yy_match_stack_size = 0;
int		yy_match_stack_cap = 0;

void	yy_push_accept(yymatch m)
{
	if (yy_match_stack_size + 1 > yy_match_stack_cap)
	{
		if (!yy_match_stack_cap)
			yy_match_stack_cap = 1;
		else
			yy_match_stack_cap *= 2;
		yy_match_stack = (yymatch *)realloc(yy_match_stack, yy_match_stack_cap * sizeof(yymatch));
	}
	yy_match_stack[yy_match_stack_size] = m;
	yy_match_stack_size++;
}

void yy_pop_match()
{
	if (yy_match_stack_size > 0)
		yy_match_stack_size--;
}

void yy_clear_stack()
{
	yy_match_stack_size = 0;
}

yymatch yy_top_match()
{
	yymatch ret = yy_match_stack[yy_match_stack_size - 1];
	return ret;
}

void yy_restore_save()
{
	if (yysave)
	{
		yy_buffer[yyindex] = yysave;
		yysave = 0;
	}
}

int  yywrap(void);

int yy_read_more()
{
	begin:;
	if (!yyin && yywrap())
		return 0;
	static char *line = NULL;
	static size_t n = 0;
	int ret = getline(&line, &n, yyin);
	if (ret == -1 && errno)
		return 0;
	if (ret == -1)
	{
		if (yywrap())
			return 0;
		goto begin;
	}
	if (!yy_buffer)
		yy_buffer = (char*)calloc(ret + 1, 1);
	else
		yy_buffer = (char*)realloc(yy_buffer, yyindex + strlen(yy_buffer + yyindex) + ret + 1);
	strcat(yy_buffer + yyindex, line);
	return ret;
}

void	yy_flush_buffer()
{
	if (yysave)
	{
		yy_buffer[yyindex] = yysave;
		yysave = 0;
	}
	if (yynoflush)
	{
		yynoflush = false;
		return;
	}
	memmove(yy_buffer, yy_buffer + yyindex, strlen(yy_buffer + yyindex) + 1);
	yyindex = 0;
}

int input(void)
{
	if (yysave)
	{
		char ret = yysave;
		yysave = 0;
		yyindex++;
		return ret;
	}
	if (!yy_buffer[yyindex] && !yy_read_more())
		return 0;
	char ret = yy_buffer[yyindex];
	yyindex++;
	return ret;
}

int	unput(char c)
{
	if (yyindex == 0)
		return 0;
	if (yysave)
	{
		yy_buffer[yyindex] = yysave;
		yysave = c;
		yyindex--;
		yy_buffer[yyindex] = 0;
		return 0;
	}
	yyindex--;
	yy_buffer[yyindex] = c;
	return 0;
}

int	yymore()
{
	yynoflush = true;
	return 0;
}

int  yyless(int n)
{
	if (n > yyindex)
		return 1;
	if (yysave)
	{
		yy_buffer[yyindex] = yysave;
		yysave = yy_buffer[n];
		yy_buffer[n] = 0;
	}
	yyleng = n;
	yyindex = n;
	return 0;
}


int yylex(void)
{
	static int yy_start_state = INITIAL + 1;
	static bool yybol = true;

	%%[YYLEX_USER_CONTENT]%%

	if (!yy_buffer && !yy_read_more())
		return 0;
	while (1)
	{
		yy_flush_buffer();
		yy_clear_stack();
		int yystate = yy_start_state + yybol;
		yy_match_begin:;
		int yyaccepted = 0;
		if (!yy_buffer[0] && !yy_read_more())
			return 0;
		while(yystate && (yy_buffer[yyindex] || yy_read_more()))
		{
			yystate = yytransitions[yystate - 1][yy_buffer[yyindex]];
			yyindex++;
			if (yystate && yyaccept_table[yystate - 1])
				yy_push_accept((yymatch){yyindex, yyaccept_table[yystate - 1]});
		}
		yy_handle_match:;
		if (yy_match_stack_size == 0)
		{
			yyleng = 1;
			yyaccepted = 0;
		}
		else
		{
			yyleng = yy_top_match().pos;
			yyaccepted = yy_top_match().rule;
		}
		yyindex = yyleng;
		yysave = yy_buffer[yyindex];
		yybol = (yy_buffer[yyleng - 1] == '\n');
		yy_buffer[yyindex] = 0;


#ifdef YY_TEXT_ARRAY
		memcpy(yytext, yy_buffer, yyleng);
		yytext[yyleng] = 0;
#else
		yytext = yy_buffer;
#endif

		switch(yyaccepted)
		{
			case 0:
				ECHO;
				break;
			%%[RULES]%%
		}
	}
}

%%[USER_SUBROUTINES]%%
